# Security
# Script Injection: Values injeted in you workflow
# - Issue title with a shell command
# - To prevent these attacks, it can be used Actions, and env
#   variables and prevent using github vars in the run section 

# Malicious Third-Party Actions
# - Action can perform potential malicious
# - Only trusted Action must be used
# - Used verfied creator actions, blue checkmark, GitHub team approved it
# - Analize the code behind that action
# - GitHub does not monitor action

# Permission Issues
# - Set enough perimissions, like "read-only"
# - If permission is not set, every user can perform everything
# - Setting workflow permissions is just a another security layer

# GITHUB_TOKEN
# Is autogenarated by Github, it's valid until jobs are done
# according the permissions, it will be linked to GitHub Token
# Token worked under the hood when checkout repos

# OpenID Connect
# Dynamically request permissions to the provider
# It's a restrictive permission that works for a certain period of time
name: 9.1 Label Issues (Permissions Example)
on:
  issues:
    types:
      - opened
# permissions: To apply for all jobs
jobs:
  assign-label:
    permissions: # Checkout the docs to see more permissions
      issues: write
    runs-on: ubuntu-latest
    steps:
      - name: Assign label
        if: contains(github.event.issue.title, 'bug')
        run: |
          curl -X POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          -d '{
              "labels": ["bug"]
            }' \
          --fail