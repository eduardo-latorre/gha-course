# Artifact: used to share files
# Outputs: information that every job outputs
# Caching: Look in the docs in Github to see all the folder could be cached
# Using Github expression ${{ expression-name }}
name: 4 Artifacts and Outputs
on:
  push:
    branches:
      - main
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies # Caching dependencies
        uses: action/cache@v3
        with:
          path: ~/.npm # Setting the path that needs to be cached
          key: deps-node-module-${{ hashFile('**/package-lock.json') }} # Used to retrive the value in the future
      - name: Install dependencies # if the ~/.npm folder exist this step will be skipped
        run: npm ci 
      - name: Test code
        run: npm run test
  build:
    needs: tests
    runs-on: ubuntu-latest
    outputs: # Using a Job Output
      # Just a custom name
      script-file: ${{ steps.publish.outputs.script-file }}
      # ${{ step | step-id | output | output-name }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies # Caching dependencies
        uses: action/cache@v3
        with:
          path: ~/.npm # Setting the path that needs to be cached
          key: deps-node-module-${{ hashFile('**/package-lock.json') }} # Used to retrive the value in the future
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename # Setting a step output
        id: publish
        # Passing a value to GitHub Output file
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifact # Using an action to upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: | # Where the artifact will be stored
            dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifact # Get the artifact
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output content # The download action will locate in the dist-files folder
        run: ls
      - name: Output filename # Using build Output
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
